// Generated by Dagger (https://dagger.dev).
package usa.overplay.task.features.player;

import android.content.Context;
import androidx.lifecycle.Lifecycle;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ExoPlayerManager_Factory implements Factory<ExoPlayerManager> {
  private final Provider<Lifecycle> lifeCycleProvider;

  private final Provider<Context> contextProvider;

  private final Provider<PlayerViewProvider> playerViewProvider;

  private final Provider<Boolean> isPlayWhenReadyProvider;

  private final Provider<String> videoUrlProvider;

  public ExoPlayerManager_Factory(Provider<Lifecycle> lifeCycleProvider,
      Provider<Context> contextProvider, Provider<PlayerViewProvider> playerViewProvider,
      Provider<Boolean> isPlayWhenReadyProvider, Provider<String> videoUrlProvider) {
    this.lifeCycleProvider = lifeCycleProvider;
    this.contextProvider = contextProvider;
    this.playerViewProvider = playerViewProvider;
    this.isPlayWhenReadyProvider = isPlayWhenReadyProvider;
    this.videoUrlProvider = videoUrlProvider;
  }

  @Override
  public ExoPlayerManager get() {
    return newInstance(lifeCycleProvider.get(), contextProvider.get(), playerViewProvider.get(), isPlayWhenReadyProvider.get(), videoUrlProvider.get());
  }

  public static ExoPlayerManager_Factory create(Provider<Lifecycle> lifeCycleProvider,
      Provider<Context> contextProvider, Provider<PlayerViewProvider> playerViewProvider,
      Provider<Boolean> isPlayWhenReadyProvider, Provider<String> videoUrlProvider) {
    return new ExoPlayerManager_Factory(lifeCycleProvider, contextProvider, playerViewProvider, isPlayWhenReadyProvider, videoUrlProvider);
  }

  public static ExoPlayerManager newInstance(Lifecycle lifeCycle, Context context,
      PlayerViewProvider playerViewProvider, boolean isPlayWhenReady, String videoUrl) {
    return new ExoPlayerManager(lifeCycle, context, playerViewProvider, isPlayWhenReady, videoUrl);
  }
}
