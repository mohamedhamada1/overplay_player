// Generated by Dagger (https://dagger.dev).
package usa.overplay.task.features.player;

import androidx.fragment.app.Fragment;
import androidx.lifecycle.Lifecycle;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocationServiceManager_Factory implements Factory<LocationServiceManager> {
  private final Provider<Lifecycle> lifeCycleProvider;

  private final Provider<Fragment> fragmentProvider;

  private final Provider<PermissionImpl> permissionImplProvider;

  public LocationServiceManager_Factory(Provider<Lifecycle> lifeCycleProvider,
      Provider<Fragment> fragmentProvider, Provider<PermissionImpl> permissionImplProvider) {
    this.lifeCycleProvider = lifeCycleProvider;
    this.fragmentProvider = fragmentProvider;
    this.permissionImplProvider = permissionImplProvider;
  }

  @Override
  public LocationServiceManager get() {
    return newInstance(lifeCycleProvider.get(), fragmentProvider.get(), permissionImplProvider.get());
  }

  public static LocationServiceManager_Factory create(Provider<Lifecycle> lifeCycleProvider,
      Provider<Fragment> fragmentProvider, Provider<PermissionImpl> permissionImplProvider) {
    return new LocationServiceManager_Factory(lifeCycleProvider, fragmentProvider, permissionImplProvider);
  }

  public static LocationServiceManager newInstance(Lifecycle lifeCycle, Fragment fragment,
      PermissionImpl permissionImpl) {
    return new LocationServiceManager(lifeCycle, fragment, permissionImpl);
  }
}
